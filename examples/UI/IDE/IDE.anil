#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <commctrl.h>

import Vector
import String
import UI
import File
import Subprocess

function CreateUIWidgetFromVoidPtr(ptr: voidPtr) -> UIWidget:
  let w = UIWidget{};
  let widget = w.CreateUIWidgetFromVoidPtr(ptr)
  return widget
endfunction

function PythonPreprocess()
  let subprocess = Subprocess{"python E:\\ANIL\\preprocess_2.py --filename E:\\ANIL\\examples\\UI\\IDE\\out.anil --no-clang-format"};
  let result = subprocess.run()
  if result == 0{
    print("Python preprocessing started...\n")
    let exit_code = subprocess.wait()
    if exit_code == 0{
      print("Preprocessing succeeded.\n")
    } else {
      print("Preprocessing failed with exit code: {exit_code}")
    }
  } else {
    print("Failed to start Preprocessing process.\n")
  }
endfunction

function GCCCompile()
  let subprocess = Subprocess{"gcc -O2 E:\\ANIL\\examples\\UI\\IDE\\out_generated_anil.c -o out -lgdi32 -lcomctl32 -mwindows"};
  let result = subprocess.run()
  if result == 0{
    print("Compilation started...\n")
    let exit_code = subprocess.wait()
    if exit_code == 0{
      print("Compilation succeeded.\n")
    } else {
      print("Compilation failed with exit code: {exit_code}")
    }
  } else {
    print("Failed to start compilation process.\n")
  }
endfunction

function Compile(userData: voidPtr)
  let root = CreateUIWidgetFromVoidPtr(userData)

  PythonPreprocess()
  GCCCompile()
endfunction

function Execute(userData: voidPtr)
  let root = CreateUIWidgetFromVoidPtr(userData)

  let subprocess = Subprocess{"out"};
  let result = subprocess.run_and_detach()
  if result == 0{
    print("Launched application out.exe.\n")
  } else {
    print("Failed to Launch application out.exe.\n")
  }
endfunction

function Load(userData: voidPtr)
  let root = CreateUIWidgetFromVoidPtr(userData)

  let editor = root.FindElementById("filePickerButton")
  if editor.isValid(){
    let fileName = editor.getFilePath()

    let fileContents = ""
    fileContents.set_to_file_contents(fileName)

    let codeEditor = root.FindElementById("codeEditor")
    if codeEditor.isValid(){
      codeEditor.SetEditText(fileContents)
    }
  }
endfunction

function OpenFileAndLoadToEditor(userData: voidPtr)
  let root = CreateUIWidgetFromVoidPtr(userData)

  let editor = root.FindElementById("codeEditor")
  if editor.isValid(){
    let fileContents = editor.OpenFilePickerAndReadContents()
    editor.SetEditText(fileContents)
  }
endfunction

function SaveEditorContentsToFile(userData: voidPtr)
  let root = CreateUIWidgetFromVoidPtr(userData)

  let editor = root.FindElementById("codeEditor")
  if editor.isValid(){
    let fileContents = editor.GetEditText()

    let outputFile = File{"out.anil"};
    outputFile.write(fileContents)
  }
endfunction

function WinMain(hInstance: HINSTANCE, hPrevInstance: HINSTANCE, lpCmdLine: LPSTR, nCmdShow: int) -> int:
  let AppConfig = WinUIAppConfig{hInstance, nCmdShow};

  let App = WinUIApp{};
  let result_code : int = App.Create(AppConfig, "ANIL IDE")
  
  if result_code == -1 {
    // Initialization failed
    return -1; 
  }

  App.ShowConsoleWindow()

  <UI>
    <App id="_" name="App" rootElement="root_elem"></App>
    <Label id="headerLabel">"My Own IDE"</Label>
    <TextArea id="codeEditor" font="JetBrains Mono"></TextArea>
    <HBox id="actionRow">
      <Input type="file" id="filePickerButton" onclick="Load(root_elem)" accept="ANIL & C Files|*.anil;*.c|Anil Files|*.anil|C Source Files|*.c|"></Input>
      <Button id="loadButton" onclick="Load(root_elem)">"Load File"</Button>
      <Button id="saveButton" onclick="SaveEditorContentsToFile(root_elem)">"Save File"</Button>
      <Button id="compileButton" onclick="Compile(root_elem)">"Compile"</Button>
      <Button id="executeButton" onclick="Execute(root_elem)">"Execute"</Button>
    </HBox>
  </UI>

  // Create Windows Controls (HWNDs) for Children of Root.
  let create_status = App.CreateControls()
  if create_status == false {
    fprintf(stderr, "Failed to create HWND tree starting from child '%s'.\n", root_elem.uiElement->id);
    App.CleanUp()
    return -1
  }

  let exitCode = App.Run()

  return 0
endfunction
