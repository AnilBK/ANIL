Ideas : 

March 3, 2023.

1. Compile Time Dictionary:

    constexpr Dictionary enum_to_color = {
        "Red" : 255,
        "Green" : 255,
        "Blue" : 255
    }

    let r_value = enum_to_color["Red"]
    # Compiled to :
    #       int r_value = 255;

    let v_value = enum_to_color["Violet"]
    # Compiler Error.

    Done...

2. Hooks inside Function

    @hook_method means compile time replacement is possible.

    class A:
        int a;

        def default_print(a):
            print(a)

        def print():
            @hook_method(a, default = default_print)
            print(a)

        # Or Syntax 2.
        def print():
            # Call 'hook_method' else call the body within.
            @hook_begin("hook_method", a)
            print(a)
            @hook_end



    def CustomPrint(a):
        print(f"{a} is nice.")

    A obj;
    obj.a = 10;

    @hook_method(CustomPrint)
    obj.print()

    Done...


Explicitly convert Char to Char* by creating a temporary variable.

All local variables should have different name because we store variable name 
and types without defined scope.


March 27 :: Initializer Lists.

def push X...{
	char_tokens.allocate_n_more X.size
	forall x in X: char_tokens.push x 
}

push 10 20 30 40 50 60 70

Translated to :

char_tokens.allocate_n_more 7
char_tokens.push 10
char_tokens.push 20
char_tokens.push 30
char_tokens.push 40
char_tokens.push 50
char_tokens.push 60
char_tokens.push 70

-------------------------------------------------

March 30 :: Reflection

struct Cat{str name;int height;};

def push():
    forall x in members_of(Cat): values.push x 
enddef  

Translated to :

values.push "name"
values.push "height"

-------------------------------------------------

April 2 :: Macros to class Macros

  def push(X...):
    values.allocate_more X.size
	forall x: values.push_unchecked x 
  enddef  

  def push(X...) for Vector:
    self.allocate_more X.size
	forall x: self.push_unchecked x 
  enddef  

  let A = Vector<int>{};
  A.pushn 10 20 30 40 50


^^^^ Add it to the class itself.

-------------------------------------------------

May 1: Automatically fetch strings from Class Objects.

      if token in CHARACTER_TOKENS{
        let int_tk = CHARACTER_TOKENS[token]
      Here token is of String class.
      But 'in' expects a str and CHARACTER_TOKENS[] expects a str.
      Since, the string class has a c_str method, we should be able to pass the String Class Object 'token'
      and the compiler handles fetching the c string, something like belows.

      if token_str.c_str() in CHARACTER_TOKENS{
        let int_tk = CHARACTER_TOKENS[token_str.c_str()]

----------------------------------------------------------------------------------------------------------------
Reminder : 
  const char* type = "@TEMPLATED_DATA_TYPE@"; to get the current template type when we are inside a c function of a given class.

  Templated print function using snprint:

c_function _print_func(format_specifier : char)
  // The longest possible format string 3 characters and a null terminator.
  char format_str[4];
  snprintf(format_str, sizeof(format_str), "%%%c", format_specifier);

  printf("Dynamic Array (size = %zu, capacity = %zu) : [", this->size, this->capacity);
  for (size_t i = 0; i < this->size; ++i) {
    printf(format_str, this->arr[i]);
    if (i < this->size - 1) {
      printf(", ");
    }
  }
  printf("]\n");
endc_function

----------------------------------------------------------------------------------------------------------------
